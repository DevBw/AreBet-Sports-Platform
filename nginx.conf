# ===============================================
# NGINX CONFIGURATION FOR AREBET PRODUCTION
# Optimized for security, performance, and PWA
# ===============================================

user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

# Load modules
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Security headers (applied globally)
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api-football-v1.p.rapidapi.com https://*.supabase.co https://fonts.googleapis.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), vibrate=(), fullscreen=(self)" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # Main server block
    server {
        listen 8080;
        listen [::]:8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Apply general rate limiting
        limit_req zone=general burst=50 nodelay;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Service Worker - no cache
        location = /sw.js {
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Content-Type "application/javascript";
        }

        # Manifest file
        location = /manifest.json {
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
            add_header Content-Type "application/manifest+json";
        }

        # Static assets with long cache
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            
            # Gzip static assets
            location ~* \.(css|js)$ {
                gzip_static on;
                expires 1y;
                add_header Cache-Control "public, max-age=31536000, immutable";
            }
        }

        # JavaScript files
        location ~* \.js$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Content-Type "text/javascript; charset=utf-8";
        }

        # CSS files
        location ~* \.css$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Content-Type "text/css; charset=utf-8";
        }

        # Font files
        location ~* \.(woff|woff2|eot|ttf|otf)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        }

        # Image files
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            
            # Enable image optimization if available
            # location ~* \.(jpg|jpeg|png)$ {
            #     image_filter resize 800 600;
            #     image_filter_jpeg_quality 85;
            #     expires 30d;
            # }
        }

        # API proxy (if needed for backend)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Proxy to backend (uncomment and configure if needed)
            # proxy_pass http://backend:3001/api/;
            
            # For now, return 404 for API requests
            return 404;
        }

        # SPA fallback - serve index.html for all routes
        location / {
            try_files $uri $uri/ @fallback;
            
            # Cache HTML files for short time
            location ~* \.html$ {
                expires 1h;
                add_header Cache-Control "public, max-age=3600";
            }
        }

        # Fallback to index.html for SPA routing
        location @fallback {
            rewrite ^.*$ /index.html last;
        }

        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Security: Block access to sensitive files
        location ~* \.(env|log|conf)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Optional: Basic authentication for staging
        # location / {
        #     auth_basic "AreBet Staging";
        #     auth_basic_user_file /etc/nginx/.htpasswd;
        #     try_files $uri $uri/ @fallback;
        # }
    }

    # HTTP to HTTPS redirect (if using HTTPS)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name _;
    #     return 301 https://$server_name$request_uri;
    # }
}

# Stream block for TCP/UDP proxying (if needed)
# stream {
#     # TCP proxy configuration
# }