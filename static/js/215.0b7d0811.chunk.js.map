{"version":3,"file":"static/js/215.0b7d0811.chunk.js","mappings":"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","sources":["features/fixtures/Fixtures.js"],"sourcesContent":["// ===============================================\r\n// FIXTURES PAGE COMPONENT\r\n// Comprehensive fixture listings with filters and search\r\n// ===============================================\r\n\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react'\r\nimport { useAuth } from '../../shared/hooks/useAuth'\r\nimport { areBetService } from '../../shared/services/SupabaseServiceV2'\r\nimport { \r\n  Header,\r\n  Card, \r\n  LoadingSpinner,\r\n  BackgroundWrapper,\r\n  MatchCard\r\n} from '../../shared/components'\r\n\r\nconst Fixtures = () => {\r\n  const { isPremium, hasFeature } = useAuth()\r\n  const [fixtures, setFixtures] = useState([])\r\n  const [leagues, setLeagues] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(null)\r\n  const [selectedLeague, setSelectedLeague] = useState('all')\r\n  const [selectedDate, setSelectedDate] = useState(() => {\r\n    return new Date().toISOString().split('T')[0]\r\n  })\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  const loadFixtures = useCallback(async () => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      // Load fixtures for selected date\r\n      const fixturesResponse = await areBetService.getFixtures({ \r\n        date: selectedDate, \r\n        limit: 100 \r\n      })\r\n\r\n      if (fixturesResponse?.response) {\r\n        setFixtures(fixturesResponse.response)\r\n      } else {\r\n        setFixtures([])\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading fixtures:', err)\r\n      setError('Failed to load fixtures')\r\n      setFixtures([])\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [selectedDate])\r\n\r\n  const loadLeagues = useCallback(async () => {\r\n    try {\r\n      const leaguesResponse = await areBetService.getLeagues({ limit: 50 })\r\n      if (leaguesResponse?.response) {\r\n        setLeagues(leaguesResponse.response)\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading leagues:', err)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    loadFixtures()\r\n  }, [loadFixtures])\r\n\r\n  useEffect(() => {\r\n    loadLeagues()\r\n  }, [loadLeagues])\r\n\r\n  // Filter fixtures based on league and search\r\n  const filteredFixtures = useMemo(() => {\r\n    let filtered = fixtures\r\n\r\n    // Filter by league\r\n    if (selectedLeague !== 'all') {\r\n      filtered = filtered.filter(fixture => \r\n        fixture.league?.id?.toString() === selectedLeague\r\n      )\r\n    }\r\n\r\n    // Filter by search term\r\n    if (searchTerm.trim()) {\r\n      const search = searchTerm.toLowerCase()\r\n      filtered = filtered.filter(fixture => \r\n        fixture.teams?.home?.name?.toLowerCase().includes(search) ||\r\n        fixture.teams?.away?.name?.toLowerCase().includes(search) ||\r\n        fixture.league?.name?.toLowerCase().includes(search)\r\n      )\r\n    }\r\n\r\n    return filtered\r\n  }, [fixtures, selectedLeague, searchTerm])\r\n\r\n  // Group fixtures by status\r\n  const groupedFixtures = useMemo(() => {\r\n    const groups = {\r\n      live: [],\r\n      upcoming: [],\r\n      finished: []\r\n    }\r\n\r\n    filteredFixtures.forEach(fixture => {\r\n      const status = fixture.fixture?.status?.short\r\n      if (['1H', '2H', 'HT', 'LIVE'].includes(status)) {\r\n        groups.live.push(fixture)\r\n      } else if (status === 'NS') {\r\n        groups.upcoming.push(fixture)\r\n      } else {\r\n        groups.finished.push(fixture)\r\n      }\r\n    })\r\n\r\n    return groups\r\n  }, [filteredFixtures])\r\n\r\n  const handleDateChange = (e) => {\r\n    setSelectedDate(e.target.value)\r\n  }\r\n\r\n  const handleLeagueChange = (e) => {\r\n    setSelectedLeague(e.target.value)\r\n  }\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n\r\n  const navigateDate = (direction) => {\r\n    const currentDate = new Date(selectedDate)\r\n    const newDate = new Date(currentDate)\r\n    newDate.setDate(currentDate.getDate() + direction)\r\n    setSelectedDate(newDate.toISOString().split('T')[0])\r\n  }\r\n\r\n  return (\r\n    <BackgroundWrapper>\r\n      <Header />\r\n      <main className=\"min-h-screen\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n          {/* Header */}\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-3xl font-bold text-yellow-400 text-visible-strong mb-2\">Fixtures</h1>\r\n            <p className=\"text-base text-gray-300 text-visible\">Browse football fixtures by date and league</p>\r\n          </div>\r\n\r\n          {/* Filters */}\r\n          <Card className=\"mb-6 p-4\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {/* Date Navigation */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <button\r\n                  onClick={() => navigateDate(-1)}\r\n                  className=\"px-3 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors text-visible\"\r\n                >\r\n                  ←\r\n                </button>\r\n                <input\r\n                  type=\"date\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  className=\"flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none text-visible\"\r\n                />\r\n                <button\r\n                  onClick={() => navigateDate(1)}\r\n                  className=\"px-3 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors text-visible\"\r\n                >\r\n                  →\r\n                </button>\r\n              </div>\r\n\r\n              {/* League Filter */}\r\n              <select\r\n                value={selectedLeague}\r\n                onChange={handleLeagueChange}\r\n                className=\"px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none text-visible\"\r\n              >\r\n                <option value=\"all\">All Leagues</option>\r\n                {leagues.map(league => (\r\n                  <option key={league.league.id} value={league.league.id.toString()}>\r\n                    {league.league.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n\r\n              {/* Search */}\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search teams...\"\r\n                value={searchTerm}\r\n                onChange={handleSearchChange}\r\n                className=\"px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none text-visible\"\r\n              />\r\n\r\n              {/* Results Count */}\r\n              <div className=\"flex items-center text-sm text-visible\">\r\n                {loading ? (\r\n                  \"Loading...\"\r\n                ) : (\r\n                  `${filteredFixtures.length} fixture${filteredFixtures.length !== 1 ? 's' : ''} found`\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Content */}\r\n          {loading ? (\r\n            <div className=\"flex justify-center items-center py-12\">\r\n              <LoadingSpinner />\r\n            </div>\r\n          ) : error ? (\r\n            <Card className=\"p-8 text-center\">\r\n              <div className=\"text-red-500 text-visible\">{error}</div>\r\n              <button\r\n                onClick={loadFixtures}\r\n                className=\"mt-4 px-4 py-2 bg-yellow-500 text-black rounded-lg hover:bg-yellow-400 transition-colors\"\r\n              >\r\n                Try Again\r\n              </button>\r\n            </Card>\r\n          ) : filteredFixtures.length === 0 ? (\r\n            <Card className=\"p-8 text-center\">\r\n              <div className=\"text-visible\">No fixtures found for the selected criteria</div>\r\n            </Card>\r\n          ) : (\r\n            <div className=\"space-y-6\">\r\n              {/* Live Matches */}\r\n              {groupedFixtures.live.length > 0 && (\r\n                <div>\r\n                  <h2 className=\"text-xl font-bold text-visible-strong mb-3\">Live Matches</h2>\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n                    {groupedFixtures.live.map(fixture => (\r\n                      <MatchCard\r\n                        key={fixture.fixture.id}\r\n                        match={fixture}\r\n                        showPredictions={isPremium}\r\n                        size=\"standard\"\r\n                        className=\"w-full\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Upcoming Matches */}\r\n              {groupedFixtures.upcoming.length > 0 && (\r\n                <div>\r\n                  <h2 className=\"text-xl font-bold text-visible-strong mb-4\">Upcoming Matches</h2>\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n                    {groupedFixtures.upcoming.map(fixture => (\r\n                      <MatchCard\r\n                        key={fixture.fixture.id}\r\n                        match={fixture}\r\n                        showPredictions={isPremium && hasFeature('predictions')}\r\n                        size=\"standard\"\r\n                        className=\"w-full\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Finished Matches */}\r\n              {groupedFixtures.finished.length > 0 && (\r\n                <div>\r\n                  <h2 className=\"text-xl font-bold text-visible-strong mb-4\">Finished Matches</h2>\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n                    {groupedFixtures.finished.map(fixture => (\r\n                      <MatchCard\r\n                        key={fixture.fixture.id}\r\n                        match={fixture}\r\n                        showAdvancedStats={hasFeature('advanced_stats')}\r\n                        size=\"standard\"\r\n                        className=\"w-full\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </BackgroundWrapper>\r\n  )\r\n}\r\n\r\nexport default Fixtures"],"names":["Fixtures","isPremium","hasFeature","useAuth","fixtures","setFixtures","useState","leagues","setLeagues","loading","setLoading","error","setError","selectedLeague","setSelectedLeague","selectedDate","setSelectedDate","Date","toISOString","split","searchTerm","setSearchTerm","loadFixtures","useCallback","async","fixturesResponse","areBetService","getFixtures","date","limit","response","err","console","loadLeagues","leaguesResponse","getLeagues","useEffect","filteredFixtures","useMemo","filtered","filter","fixture","_fixture$league","_fixture$league$id","league","id","toString","trim","search","toLowerCase","_fixture$teams","_fixture$teams$home","_fixture$teams$home$n","_fixture$teams2","_fixture$teams2$away","_fixture$teams2$away$","_fixture$league2","_fixture$league2$name","teams","home","name","includes","away","groupedFixtures","groups","live","upcoming","finished","forEach","_fixture$fixture","_fixture$fixture$stat","status","short","push","navigateDate","direction","currentDate","newDate","setDate","getDate","_jsxs","BackgroundWrapper","children","_jsx","Header","className","Card","onClick","type","value","onChange","e","target","map","placeholder","concat","length","LoadingSpinner","MatchCard","match","showPredictions","size","showAdvancedStats"],"sourceRoot":""}