{"version":3,"file":"static/js/198.d23def9b.chunk.js","mappings":"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","sources":["features/subscription/SubscriptionPage.js"],"sourcesContent":["// ===============================================\r\n// SUBSCRIPTION MANAGEMENT PAGE\r\n// User subscription dashboard and billing management\r\n// ===============================================\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../../shared/hooks/useAuth';\r\nimport { Header, Card, Button, PremiumBadge } from '../../shared/components';\r\nimport SubscriptionModal from './SubscriptionModal';\r\n\r\nconst SubscriptionPage = () => {\r\n  const { user, userProfile, subscriptionTier, isPremium, getSubscriptionLimits } = useAuth();\r\n  const [subscriptionModal, setSubscriptionModal] = useState(false);\r\n  const [billingHistory, setBillingHistory] = useState([]);\r\n  const [usage, setUsage] = useState({ apiCalls: 0, quota: 100 });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadSubscriptionData();\r\n    }\r\n  }, [user]); // loadSubscriptionData is defined inline so doesn't need dependency\r\n\r\n  const loadSubscriptionData = async () => {\r\n    // Load user's subscription data, billing history, and usage\r\n    const limits = getSubscriptionLimits();\r\n    \r\n    // Mock data for demo\r\n    setUsage({\r\n      apiCalls: userProfile?.api_quota_used || 0,\r\n      quota: limits.apiQuota\r\n    });\r\n\r\n    setBillingHistory([\r\n      {\r\n        id: 1,\r\n        date: '2024-01-15',\r\n        amount: 9.99,\r\n        status: 'paid',\r\n        plan: 'Pro Bettor',\r\n        invoice: 'inv_1234567890'\r\n      },\r\n      {\r\n        id: 2,\r\n        date: '2023-12-15',\r\n        amount: 9.99,\r\n        status: 'paid',\r\n        plan: 'Pro Bettor',\r\n        invoice: 'inv_0987654321'\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const handleCancelSubscription = async () => {\r\n    if (window.confirm('Are you sure you want to cancel your subscription? You\\'ll lose access to premium features at the end of your billing period.')) {\r\n      try {\r\n        // In production, this would call your backend to cancel via Stripe\r\n        alert('Subscription cancelled. You\\'ll retain access until the end of your billing period.');\r\n      } catch (error) {\r\n        alert('Failed to cancel subscription. Please contact support.');\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const getTierConfig = () => {\r\n    const configs = {\r\n      free: {\r\n        name: 'Free',\r\n        icon: 'ðŸ†“',\r\n        gradient: 'from-gray-400 to-gray-500',\r\n        features: ['Basic scores', 'Basic fixtures', 'Basic standings']\r\n      },\r\n      pro: {\r\n        name: 'Pro Bettor',\r\n        icon: 'âš¡',\r\n        gradient: 'from-cyan-500 to-blue-500',\r\n        features: ['AI predictions', 'Advanced stats', 'Real-time alerts', 'Historical data']\r\n      },\r\n      elite: {\r\n        name: 'Elite Analytics',\r\n        icon: 'ðŸŽ¯',\r\n        gradient: 'from-amber-500 to-orange-500',\r\n        features: ['Everything in Pro', 'Value bet detection', 'Custom alerts', 'Priority support']\r\n      }\r\n    };\r\n\r\n    return configs[subscriptionTier] || configs.free;\r\n  };\r\n\r\n  const config = getTierConfig();\r\n  const usagePercentage = Math.round((usage.apiCalls / usage.quota) * 100);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\r\n      <Header />\r\n      \r\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-indigo-600 to-cyan-600 bg-clip-text text-transparent mb-2\">\r\n            Subscription Management\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Manage your subscription, view usage, and billing information\r\n          </p>\r\n        </div>\r\n\r\n        {/* Current Plan */}\r\n        <Card className=\"p-6 mb-8\">\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className={`w-16 h-16 rounded-full bg-gradient-to-r ${config.gradient} flex items-center justify-center text-2xl`}>\r\n                {config.icon}\r\n              </div>\r\n              <div>\r\n                <div className=\"flex items-center space-x-2 mb-1\">\r\n                  <h2 className=\"text-2xl font-bold text-gray-900\">{config.name}</h2>\r\n                  {isPremium && <PremiumBadge tier={subscriptionTier} />}\r\n                </div>\r\n                <p className=\"text-gray-600\">\r\n                  {isPremium ? 'Active subscription' : 'Free plan'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {!isPremium && (\r\n              <Button\r\n                variant=\"premium\"\r\n                onClick={() => setSubscriptionModal(true)}\r\n              >\r\n                Upgrade Now\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Features */}\r\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Plan Features</h3>\r\n              <ul className=\"space-y-2\">\r\n                {config.features.map((feature, index) => (\r\n                  <li key={index} className=\"flex items-center\">\r\n                    <span className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></span>\r\n                    <span className=\"text-gray-700\">{feature}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n\r\n            {/* Usage */}\r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-900 mb-3\">API Usage</h3>\r\n              <div className=\"mb-3\">\r\n                <div className=\"flex justify-between text-sm mb-1\">\r\n                  <span>API Calls This Month</span>\r\n                  <span>{usage.apiCalls} / {usage.quota}</span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                  <div \r\n                    className={`h-2 rounded-full transition-all duration-300 ${\r\n                      usagePercentage > 80 ? 'bg-red-500' : \r\n                      usagePercentage > 60 ? 'bg-yellow-500' : 'bg-green-500'\r\n                    }`}\r\n                    style={{ width: `${Math.min(usagePercentage, 100)}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm text-gray-600\">\r\n                Resets monthly. {usage.quota - usage.apiCalls} calls remaining.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Plan Actions */}\r\n          {isPremium && (\r\n            <div className=\"flex space-x-4 pt-4 border-t border-gray-200\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setSubscriptionModal(true)}\r\n              >\r\n                Change Plan\r\n              </Button>\r\n              <Button\r\n                variant=\"ghost\"\r\n                onClick={handleCancelSubscription}\r\n                className=\"text-red-600 hover:text-red-700\"\r\n              >\r\n                Cancel Subscription\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Card>\r\n\r\n        {/* Billing Information */}\r\n        {isPremium && (\r\n          <Card className=\"p-6 mb-8\">\r\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Billing Information</h3>\r\n            \r\n            <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\r\n              <div>\r\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Next Billing Date</h4>\r\n                <p className=\"text-gray-700\">February 15, 2024</p>\r\n                <p className=\"text-sm text-gray-500\">$9.99 will be charged</p>\r\n              </div>\r\n              \r\n              <div>\r\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Payment Method</h4>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className=\"text-gray-700\">â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ 4242</span>\r\n                  <span className=\"text-sm text-gray-500\">Expires 12/25</span>\r\n                </div>\r\n                <Button variant=\"ghost\" size=\"small\" className=\"mt-1 text-indigo-600\">\r\n                  Update Payment Method\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Billing History */}\r\n        {isPremium && (\r\n          <Card className=\"p-6\">\r\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Billing History</h3>\r\n            \r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"border-b border-gray-200\">\r\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-900\">Date</th>\r\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-900\">Plan</th>\r\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-900\">Amount</th>\r\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-900\">Status</th>\r\n                    <th className=\"text-left py-3 px-4 font-semibold text-gray-900\">Invoice</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {billingHistory.map((bill) => (\r\n                    <tr key={bill.id} className=\"border-b border-gray-100\">\r\n                      <td className=\"py-3 px-4 text-gray-700\">\r\n                        {new Date(bill.date).toLocaleDateString()}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 text-gray-700\">{bill.plan}</td>\r\n                      <td className=\"py-3 px-4 text-gray-700\">${bill.amount}</td>\r\n                      <td className=\"py-3 px-4\">\r\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                          bill.status === 'paid' \r\n                            ? 'bg-green-100 text-green-800' \r\n                            : 'bg-red-100 text-red-800'\r\n                        }`}>\r\n                          {bill.status}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"py-3 px-4\">\r\n                        <Button variant=\"ghost\" size=\"small\" className=\"text-indigo-600\">\r\n                          Download\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Free Plan CTA */}\r\n        {!isPremium && (\r\n          <Card className=\"p-8 text-center bg-gradient-to-r from-indigo-50 to-cyan-50 border border-indigo-200\">\r\n            <div className=\"text-4xl mb-4\">ðŸš€</div>\r\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n              Ready to Upgrade?\r\n            </h3>\r\n            <p className=\"text-gray-700 mb-6 max-w-md mx-auto\">\r\n              Unlock AI-powered predictions, advanced analytics, and premium insights to make better betting decisions.\r\n            </p>\r\n            <Button\r\n              variant=\"premium\"\r\n              size=\"large\"\r\n              onClick={() => setSubscriptionModal(true)}\r\n            >\r\n              View Premium Plans\r\n            </Button>\r\n          </Card>\r\n        )}\r\n      </main>\r\n\r\n      {/* Subscription Modal */}\r\n      <SubscriptionModal\r\n        isOpen={subscriptionModal}\r\n        onClose={() => setSubscriptionModal(false)}\r\n        defaultTier={subscriptionTier === 'free' ? 'pro' : 'elite'}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionPage;"],"names":["SubscriptionPage","user","userProfile","subscriptionTier","isPremium","getSubscriptionLimits","useAuth","subscriptionModal","setSubscriptionModal","useState","billingHistory","setBillingHistory","usage","setUsage","apiCalls","quota","useEffect","loadSubscriptionData","async","limits","api_quota_used","apiQuota","id","date","amount","status","plan","invoice","config","getTierConfig","configs","free","name","icon","gradient","features","pro","elite","usagePercentage","Math","round","_jsxs","className","children","_jsx","Header","Card","concat","PremiumBadge","tier","Button","variant","onClick","map","feature","index","style","width","min","window","confirm","alert","error","size","bill","Date","toLocaleDateString","SubscriptionModal","isOpen","onClose","defaultTier"],"sourceRoot":""}